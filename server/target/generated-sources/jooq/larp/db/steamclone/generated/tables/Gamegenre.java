/*
 * This file is generated by jOOQ.
 */
package larp.db.steamclone.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import larp.db.steamclone.generated.Indexes;
import larp.db.steamclone.generated.Keys;
import larp.db.steamclone.generated.Steamclone;
import larp.db.steamclone.generated.tables.records.GamegenreRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Gamegenre extends TableImpl<GamegenreRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>steamclone.GameGenre</code>
     */
    public static final Gamegenre GAMEGENRE = new Gamegenre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GamegenreRecord> getRecordType() {
        return GamegenreRecord.class;
    }

    /**
     * The column <code>steamclone.GameGenre.gameName</code>.
     */
    public final TableField<GamegenreRecord, String> GAMENAME = createField(DSL.name("gameName"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>steamclone.GameGenre.gameGenre</code>.
     */
    public final TableField<GamegenreRecord, String> GAMEGENRE_ = createField(DSL.name("gameGenre"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    private Gamegenre(Name alias, Table<GamegenreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Gamegenre(Name alias, Table<GamegenreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>steamclone.GameGenre</code> table reference
     */
    public Gamegenre(String alias) {
        this(DSL.name(alias), GAMEGENRE);
    }

    /**
     * Create an aliased <code>steamclone.GameGenre</code> table reference
     */
    public Gamegenre(Name alias) {
        this(alias, GAMEGENRE);
    }

    /**
     * Create a <code>steamclone.GameGenre</code> table reference
     */
    public Gamegenre() {
        this(DSL.name("GameGenre"), null);
    }

    public <O extends Record> Gamegenre(Table<O> child, ForeignKey<O, GamegenreRecord> key) {
        super(child, key, GAMEGENRE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Steamclone.STEAMCLONE;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.GAMEGENRE_GAMEGENRE);
    }

    @Override
    public UniqueKey<GamegenreRecord> getPrimaryKey() {
        return Keys.KEY_GAMEGENRE_PRIMARY;
    }

    @Override
    public List<ForeignKey<GamegenreRecord, ?>> getReferences() {
        return Arrays.asList(Keys.GAMEGENRE_IBFK_1, Keys.GAMEGENRE_IBFK_2);
    }

    private transient Games _games;
    private transient Genre _genre;

    /**
     * Get the implicit join path to the <code>steamclone.Games</code> table.
     */
    public Games games() {
        if (_games == null)
            _games = new Games(this, Keys.GAMEGENRE_IBFK_1);

        return _games;
    }

    /**
     * Get the implicit join path to the <code>steamclone.Genre</code> table.
     */
    public Genre genre() {
        if (_genre == null)
            _genre = new Genre(this, Keys.GAMEGENRE_IBFK_2);

        return _genre;
    }

    @Override
    public Gamegenre as(String alias) {
        return new Gamegenre(DSL.name(alias), this);
    }

    @Override
    public Gamegenre as(Name alias) {
        return new Gamegenre(alias, this);
    }

    @Override
    public Gamegenre as(Table<?> alias) {
        return new Gamegenre(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Gamegenre rename(String name) {
        return new Gamegenre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gamegenre rename(Name name) {
        return new Gamegenre(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Gamegenre rename(Table<?> name) {
        return new Gamegenre(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
