/*
 * This file is generated by jOOQ.
 */
package larp.db.steamclone.generated.tables.records;


import larp.db.steamclone.generated.tables.Genre;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GenreRecord extends UpdatableRecordImpl<GenreRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>steamclone.Genre.type</code>.
     */
    public void setType(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>steamclone.Genre.type</code>.
     */
    public String getType() {
        return (String) get(0);
    }

    /**
     * Setter for <code>steamclone.Genre.description</code>.
     */
    public void setDescription(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>steamclone.Genre.description</code>.
     */
    public String getDescription() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Genre.GENRE.TYPE;
    }

    @Override
    public Field<String> field2() {
        return Genre.GENRE.DESCRIPTION;
    }

    @Override
    public String component1() {
        return getType();
    }

    @Override
    public String component2() {
        return getDescription();
    }

    @Override
    public String value1() {
        return getType();
    }

    @Override
    public String value2() {
        return getDescription();
    }

    @Override
    public GenreRecord value1(String value) {
        setType(value);
        return this;
    }

    @Override
    public GenreRecord value2(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public GenreRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached GenreRecord
     */
    public GenreRecord() {
        super(Genre.GENRE);
    }

    /**
     * Create a detached, initialised GenreRecord
     */
    public GenreRecord(String type, String description) {
        super(Genre.GENRE);

        setType(type);
        setDescription(description);
        resetChangedOnNotNull();
    }
}
