/*
 * This file is generated by jOOQ.
 */
package larp.db.steamclone.generated.tables;


import java.util.function.Function;

import larp.db.steamclone.generated.Keys;
import larp.db.steamclone.generated.Steamclone;
import larp.db.steamclone.generated.tables.records.ConfigurationsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Configurations extends TableImpl<ConfigurationsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>steamclone.Configurations</code>
     */
    public static final Configurations CONFIGURATIONS = new Configurations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigurationsRecord> getRecordType() {
        return ConfigurationsRecord.class;
    }

    /**
     * The column <code>steamclone.Configurations.configurationID</code>.
     */
    public final TableField<ConfigurationsRecord, Integer> CONFIGURATIONID = createField(DSL.name("configurationID"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>steamclone.Configurations.minRequirementPC</code>.
     */
    public final TableField<ConfigurationsRecord, String> MINREQUIREMENTPC = createField(DSL.name("minRequirementPC"), SQLDataType.VARCHAR(2545), this, "");

    /**
     * The column <code>steamclone.Configurations.recRequirementPC</code>.
     */
    public final TableField<ConfigurationsRecord, String> RECREQUIREMENTPC = createField(DSL.name("recRequirementPC"), SQLDataType.VARCHAR(2545), this, "");

    /**
     * The column <code>steamclone.Configurations.minRequirementMac</code>.
     */
    public final TableField<ConfigurationsRecord, String> MINREQUIREMENTMAC = createField(DSL.name("minRequirementMac"), SQLDataType.VARCHAR(2545), this, "");

    /**
     * The column <code>steamclone.Configurations.recRequirementMac</code>.
     */
    public final TableField<ConfigurationsRecord, String> RECREQUIREMENTMAC = createField(DSL.name("recRequirementMac"), SQLDataType.VARCHAR(2545), this, "");

    /**
     * The column <code>steamclone.Configurations.minRequirementLinux</code>.
     */
    public final TableField<ConfigurationsRecord, String> MINREQUIREMENTLINUX = createField(DSL.name("minRequirementLinux"), SQLDataType.VARCHAR(2545), this, "");

    /**
     * The column <code>steamclone.Configurations.recRequirementLinux</code>.
     */
    public final TableField<ConfigurationsRecord, String> RECREQUIREMENTLINUX = createField(DSL.name("recRequirementLinux"), SQLDataType.VARCHAR(2545), this, "");

    private Configurations(Name alias, Table<ConfigurationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Configurations(Name alias, Table<ConfigurationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>steamclone.Configurations</code> table reference
     */
    public Configurations(String alias) {
        this(DSL.name(alias), CONFIGURATIONS);
    }

    /**
     * Create an aliased <code>steamclone.Configurations</code> table reference
     */
    public Configurations(Name alias) {
        this(alias, CONFIGURATIONS);
    }

    /**
     * Create a <code>steamclone.Configurations</code> table reference
     */
    public Configurations() {
        this(DSL.name("Configurations"), null);
    }

    public <O extends Record> Configurations(Table<O> child, ForeignKey<O, ConfigurationsRecord> key) {
        super(child, key, CONFIGURATIONS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Steamclone.STEAMCLONE;
    }

    @Override
    public UniqueKey<ConfigurationsRecord> getPrimaryKey() {
        return Keys.KEY_CONFIGURATIONS_PRIMARY;
    }

    @Override
    public Configurations as(String alias) {
        return new Configurations(DSL.name(alias), this);
    }

    @Override
    public Configurations as(Name alias) {
        return new Configurations(alias, this);
    }

    @Override
    public Configurations as(Table<?> alias) {
        return new Configurations(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Configurations rename(String name) {
        return new Configurations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configurations rename(Name name) {
        return new Configurations(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Configurations rename(Table<?> name) {
        return new Configurations(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
